#!/usr/bin/env node

/**
 * ๐๏ธ ุณูุฑูุจุช ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุจูุงูุงุช ูุธุงู ุงูุงุดุชุฑุงูุงุช
 * ุชุงุฑูุฎ ุงูุฅูุดุงุก: 22 ููููู 2025
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// ๐ ุฅุนุฏุงุฏุงุช Supabase
const SUPABASE_URL = 'https://ddwszecfsfkjnahesymm.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRkd3N6ZWNmc2Zram5haGVzeW1tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgzMDc2MDYsImV4cCI6MjA2Mzg4MzYwNn0.5jo4tgLAMqwVnYkhUYBa3WrNxann8xBqkNzba8DaCMg';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

/**
 * ๐ ูุฑุงุกุฉ ููู SQL
 */
function readSQLFile(filename) {
    const filePath = path.join(process.cwd(), 'database', filename);
    if (!fs.existsSync(filePath)) {
        throw new Error(`โ ุงูููู ุบูุฑ ููุฌูุฏ: ${filePath}`);
    }
    return fs.readFileSync(filePath, 'utf8');
}

/**
 * ๐ง ุชูููุฐ ุงุณุชุนูุงู SQL
 */
async function executeSQL(sql, description) {
    try {
        console.log(`๐ ${description}...`);
        
        // ุชูุณูู ุงูุงุณุชุนูุงูุงุช ุงููุชุนุฏุฏุฉ
        const statements = sql
            .split(';')
            .map(stmt => stmt.trim())
            .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
        
        for (const statement of statements) {
            if (statement.trim()) {
                const { error } = await supabase.rpc('exec_sql', { sql_query: statement });
                if (error) {
                    console.error(`โ ุฎุทุฃ ูู ุชูููุฐ: ${statement.substring(0, 100)}...`);
                    console.error(error);
                    throw error;
                }
            }
        }
        
        console.log(`โ ${description} - ุชู ุจูุฌุงุญ`);
    } catch (error) {
        console.error(`โ ูุดู ูู ${description}:`, error.message);
        throw error;
    }
}

/**
 * ๐๏ธ ุฅูุดุงุก ุฏุงูุฉ SQL ูุณุงุนุฏุฉ ูุชูููุฐ ุงูุงุณุชุนูุงูุงุช
 */
async function createExecSQLFunction() {
    const createFunctionSQL = `
        CREATE OR REPLACE FUNCTION exec_sql(sql_query text)
        RETURNS void
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $$
        BEGIN
            EXECUTE sql_query;
        END;
        $$;
    `;
    
    try {
        const { error } = await supabase.rpc('exec_sql', { sql_query: createFunctionSQL });
        if (error && !error.message.includes('already exists')) {
            // ุฅุฐุง ูู ุชูู ุงูุฏุงูุฉ ููุฌูุฏุฉุ ููุดุฆูุง ุจุทุฑููุฉ ูุฎุชููุฉ
            console.log('๐ ุฅูุดุงุก ุฏุงูุฉ SQL ูุณุงุนุฏุฉ...');
        }
    } catch (error) {
        console.log('โน๏ธ ุณูุชู ุงุณุชุฎุฏุงู ุทุฑููุฉ ุจุฏููุฉ ูุชูููุฐ SQL');
    }
}

/**
 * โ ุงูุชุญูู ูู ูุฌูุฏ ุงูุฌุฏุงูู
 */
async function checkTables() {
    try {
        const { data, error } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .eq('table_schema', 'public')
            .in('table_name', [
                'subscription_plans',
                'companies', 
                'company_users',
                'company_subscriptions',
                'usage_tracking',
                'payments',
                'invoices'
            ]);
        
        if (error) {
            console.log('โน๏ธ ุณูุชู ุฅูุดุงุก ุงูุฌุฏุงูู...');
            return [];
        }
        
        return data?.map(row => row.table_name) || [];
    } catch (error) {
        console.log('โน๏ธ ุณูุชู ุฅูุดุงุก ุงูุฌุฏุงูู...');
        return [];
    }
}

/**
 * ๐ ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
 */
async function main() {
    console.log('๐๏ธ ุจุฏุก ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุจูุงูุงุช ูุธุงู ุงูุงุดุชุฑุงูุงุช...\n');
    
    try {
        // 1. ุฅูุดุงุก ุฏุงูุฉ SQL ูุณุงุนุฏุฉ
        await createExecSQLFunction();
        
        // 2. ุงูุชุญูู ูู ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ
        const existingTables = await checkTables();
        console.log(`๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ: ${existingTables.length}`);
        
        // 3. ุฅูุดุงุก ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        if (existingTables.length < 7) {
            const schemaSQL = readSQLFile('subscription-system-schema.sql');
            await executeSQL(schemaSQL, 'ุฅูุดุงุก ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
        } else {
            console.log('โ ูููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฌูุฏ ุจุงููุนู');
        }
        
        // 4. ุงูุชุญูู ูู ูุฌูุฏ ุฎุทุท ุงูุงุดุชุฑุงู
        const { data: existingPlans } = await supabase
            .from('subscription_plans')
            .select('id')
            .limit(1);
        
        if (!existingPlans || existingPlans.length === 0) {
            const plansSQL = readSQLFile('insert-subscription-plans.sql');
            await executeSQL(plansSQL, 'ุฅุฏุฑุงุฌ ุฎุทุท ุงูุงุดุชุฑุงู');
        } else {
            console.log('โ ุฎุทุท ุงูุงุดุชุฑุงู ููุฌูุฏุฉ ุจุงููุนู');
        }
        
        // 5. ุนุฑุถ ููุฎุต ุงููุชุงุฆุฌ
        console.log('\n๐ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
        console.log('\n๐ ููุฎุต ุงููุธุงู:');
        
        // ุนุฑุถ ุฎุทุท ุงูุงุดุชุฑุงู
        const { data: plans } = await supabase
            .from('subscription_plans')
            .select('name, name_ar, monthly_price, yearly_price, max_products, max_messages_per_month')
            .order('display_order');
        
        if (plans) {
            console.log('\n๐ฐ ุฎุทุท ุงูุงุดุชุฑุงู ุงููุชุงุญุฉ:');
            plans.forEach(plan => {
                console.log(`  ๐ ${plan.name} (${plan.name_ar})`);
                console.log(`     ๐ต ${plan.monthly_price}$/ุดูุฑ - ${plan.yearly_price}$/ุณูุฉ`);
                console.log(`     ๐ฆ ${plan.max_products === -1 ? 'ุบูุฑ ูุญุฏูุฏ' : plan.max_products} ููุชุฌ`);
                console.log(`     ๐จ ${plan.max_messages_per_month === -1 ? 'ุบูุฑ ูุญุฏูุฏ' : plan.max_messages_per_month} ุฑุณุงูุฉ/ุดูุฑ`);
                console.log('');
            });
        }
        
        console.log('๐ ุงููุธุงู ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุดุฑูุงุช!');
        
    } catch (error) {
        console.error('\nโ ูุดู ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
        process.exit(1);
    }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}

export { main as setupSubscriptionDatabase };
